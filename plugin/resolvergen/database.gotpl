{{ reserveImport "context"  }}
{{ reserveImport "encoding/json" }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}

{{ reserveImport "github.com/aws/aws-sdk-go-v2/aws" }}
{{ reserveImport "github.com/aws/aws-sdk-go-v2/config" }}
{{ reserveImport "github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue" }}
{{ reserveImport "github.com/aws/aws-sdk-go-v2/service/dynamodb" }}
{{ reserveImport "github.com/aws/aws-sdk-go-v2/service/dynamodb/types" }}
{{ reserveImport "github.com/craftyc0der/gqlgen-dynamodb/graph/generated" }}
{{ reserveImport "github.com/craftyc0der/gqlgen-dynamodb/middleware" }}
{{ reserveImport "github.com/craftyc0der/gqlgen-dynamodb/graph/model" }}
{{ reserveImport "github.com/craftyc0der/gqlgen-dynamodb/graph/custom" }}
{{ reserveImport "github.com/craftyc0der/gqlgen-dynamodb/graph/utils" }}

{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}
{{ reserveImport "go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws" }}
{{ reserveImport "go.opentelemetry.io/otel/attribute" }}
{{ reserveImport "go.opentelemetry.io/otel/codes" }}
{{ reserveImport "go.opentelemetry.io/otel/trace" }}

import "crypto/md5"
import "regexp"
import "sort"
import "strings"
import "github.com/prometheus/client_golang/prometheus"

{{ .Imports }}

{{ if .HasRoot }}
	type {{.ResolverType}} struct {}
{{ end }}

{{ range $resolver := .Resolvers -}}
	func (r *{{lcFirst $resolver.Object.Name}}{{ucFirst $.ResolverType}}) {{$resolver.Field.GoFieldName}}{{ $resolver.Field.ShortResolverDeclaration }} {
		{{ $resolver.Implementation }}
	}

{{ end }}

{{ range $object := .Objects -}}
	// {{ucFirst $object.Name}} returns {{ $object.ResolverInterface | ref }} implementation.
	func (r *{{$.ResolverType}}) {{ucFirst $object.Name}}() {{ $object.ResolverInterface | ref }} { return &{{lcFirst $object.Name}}{{ucFirst $.ResolverType}}{r} }
{{ end }}

{{ range $object := .Objects -}}
	type {{lcFirst $object.Name}}{{ucFirst $.ResolverType}} struct { *{{$.ResolverType}} }
{{ end }}

{{ if (ne .RemainingSource "") }}
    // !!! WARNING !!!
    // The code below was going to be deleted when updating resolvers. It has been copied here so you have
    // one last chance to move it out of harms way if you want. There are two reasons this happens:
	//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
	//    it when you're done.
	//  - You have helper methods in this file. Move them out to keep these resolver files clean.
	{{ .RemainingSource }}
{{ end }}