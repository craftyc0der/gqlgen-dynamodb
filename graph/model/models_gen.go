// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import "reflect"

var Types = map[string]reflect.Type{
	"ApplicationCompany":      reflect.TypeOf(ApplicationCompany{}),
	"ApplicationCustomData":   reflect.TypeOf(ApplicationCustomData{}),
	"ApplicationCustomSource": reflect.TypeOf(ApplicationCustomSource{}),
	"ApplicationUser":         reflect.TypeOf(ApplicationUser{}),
	"ApplicationUserLanguage": reflect.TypeOf(ApplicationUserLanguage{}),
}

// This object represents a single Application Company.
type ApplicationCompany struct {
	// primary key generated by the server
	CompanyID string `json:"companyID" graphql:"companyID" dynamodbColumn:"fieldName:companyId,fieldType:S,jsonName:companyID" dynamodbav:"companyId" uuid:"hashKey:true"`
	// name of company
	CompanyName string `json:"companyName" graphql:"companyName" dynamodbColumn:"fieldName:userName,fieldType:S,jsonName:companyName" dynamodbav:"userName"`
	// epoch millis timestamp
	CreateDate int64 `json:"createDate" graphql:"createDate" dynamodbColumn:"fieldName:createDate,fieldType:N,jsonName:createDate" dynamodbav:"createDate" timestamp:"immutable:true"`
}

// List of [ApplicationCompany](#applicationcompany) objects
// [examples](https://github.com/craftyc0der/gqlgen-dynamodb/blob/master/graphql.md#applicationcompany)
type ApplicationCompanyList struct {
	Items []*ApplicationCompany `json:"items" graphql:"items"`
}

// This object represents fields of custom data type.
type ApplicationCustomData struct {
	Foo string `json:"foo" graphql:"foo"`
	Bar string `json:"bar" graphql:"bar"`
}

// This object represents fields from custom data source.
type ApplicationCustomSource struct {
	Custom []*ApplicationCustomData `json:"custom" graphql:"custom"`
}

// This object represents a single Application User.
type ApplicationUser struct {
	// primary key generated by the server
	UserID string `json:"userID" graphql:"userID" dynamodbColumn:"fieldName:userId,fieldType:S,jsonName:userID" dynamodbav:"userId" uuid:"hashKey:true"`
	// name of user
	UserName string `json:"userName" graphql:"userName" dynamodbColumn:"fieldName:userName,fieldType:S,jsonName:userName" dynamodbav:"userName"`
	// companyID used to link a user to a company
	CompanyID *string             `json:"companyID" graphql:"companyID" dynamodbColumn:"fieldName:companyId,fieldType:S,jsonName:companyID" dynamodbav:"companyId,omitempty"`
	Company   *ApplicationCompany `json:"company" graphql:"company" dynamodbSubquery:"parentHashKeyModelName:UserID,foreignHashKeyRequired:false,foreignHashKey:CompanyID,hashKeyModelName:CompanyID,hashKeyFieldName:companyId,hashKeyFieldType:S,className:ApplicationCompany,table:application-company,index:,limit:1,sortColumn:,sortAsc:"`
	// epoch millis timestamp
	CreateDate int64 `json:"createDate" graphql:"createDate" dynamodbColumn:"fieldName:createDate,fieldType:N,jsonName:createDate" dynamodbav:"createDate" timestamp:"immutable:true"`
	// return list of languages user speaks
	Languages []*ApplicationUserLanguage `json:"languages" graphql:"languages" dynamodbSubquery:"parentHashKeyModelName:UserID,foreignHashKeyRequired:true,foreignHashKey:UserID,hashKeyModelName:UserID,hashKeyFieldName:userId,hashKeyFieldType:S,className:ApplicationUserLanguage,table:application-userLanguage,foreignRangeKey:Language,index:,limit:,sortColumn:,sortAsc:"`
	// return opjects from custom source
	CustomData *ApplicationCustomSource `json:"customData" graphql:"customData" customSubquery:"package:custom,function:GetCustomData"`
}

// This object represents languages user's have command of.
type ApplicationUserLanguage struct {
	// primary key generated by the server
	UserID string `json:"userID" graphql:"userID" dynamodbColumn:"fieldName:userId,fieldType:S,jsonName:userID" dynamodbav:"userId"`
	// language
	UserLanguage string `json:"userLanguage" graphql:"userLanguage" dynamodbColumn:"fieldName:userLanguage,fieldType:S,jsonName:userLanguage" dynamodbav:"userLanguage"`
}

// List of [ApplicationUserLanguage](#applicationuserlanguage) objects
// [examples](https://github.com/craftyc0der/gqlgen-dynamodb/blob/master/graphql.md#applicationuserlanguage)
type ApplicationUserLanguageList struct {
	Items []*ApplicationUserLanguage `json:"items" graphql:"items"`
}

// List of [ApplicationUser](#applicationuser) objects
// [examples](https://github.com/craftyc0der/gqlgen-dynamodb/blob/master/graphql.md#applicationuser)
type ApplicationUserList struct {
	Items []*ApplicationUser `json:"items" graphql:"items"`
}

type TableBooleanFilterInput struct {
	Ne *bool `json:"ne" graphql:"ne"`
	Eq *bool `json:"eq" graphql:"eq"`
}

type TableBooleanKeyInput struct {
	Eq *bool `json:"eq" graphql:"eq"`
}

type TableFloatFilterInput struct {
	Ne      *float64   `json:"ne" graphql:"ne"`
	Eq      *float64   `json:"eq" graphql:"eq"`
	Le      *float64   `json:"le" graphql:"le"`
	Lt      *float64   `json:"lt" graphql:"lt"`
	Ge      *float64   `json:"ge" graphql:"ge"`
	Gt      *float64   `json:"gt" graphql:"gt"`
	Between []*float64 `json:"between" graphql:"between"`
}

type TableFloatKeyInput struct {
	Eq      *float64   `json:"eq" graphql:"eq"`
	Le      *float64   `json:"le" graphql:"le"`
	Lt      *float64   `json:"lt" graphql:"lt"`
	Ge      *float64   `json:"ge" graphql:"ge"`
	Gt      *float64   `json:"gt" graphql:"gt"`
	Between []*float64 `json:"between" graphql:"between"`
}

type TableIntFilterInput struct {
	Ne      *int   `json:"ne" graphql:"ne"`
	Eq      *int   `json:"eq" graphql:"eq"`
	Le      *int   `json:"le" graphql:"le"`
	Lt      *int   `json:"lt" graphql:"lt"`
	Ge      *int   `json:"ge" graphql:"ge"`
	Gt      *int   `json:"gt" graphql:"gt"`
	Between []*int `json:"between" graphql:"between"`
}

type TableIntKeyInput struct {
	Eq      *int   `json:"eq" graphql:"eq"`
	Le      *int   `json:"le" graphql:"le"`
	Lt      *int   `json:"lt" graphql:"lt"`
	Ge      *int   `json:"ge" graphql:"ge"`
	Gt      *int   `json:"gt" graphql:"gt"`
	Between []*int `json:"between" graphql:"between"`
}

type TableStringFilterInput struct {
	Ne         *string   `json:"ne" graphql:"ne"`
	Eq         *string   `json:"eq" graphql:"eq"`
	Le         *string   `json:"le" graphql:"le"`
	Lt         *string   `json:"lt" graphql:"lt"`
	Ge         *string   `json:"ge" graphql:"ge"`
	Gt         *string   `json:"gt" graphql:"gt"`
	Between    []*string `json:"between" graphql:"between"`
	BeginsWith *string   `json:"beginsWith" graphql:"beginsWith"`
}

type TableStringKeyInput struct {
	Eq         *string   `json:"eq" graphql:"eq"`
	Le         *string   `json:"le" graphql:"le"`
	Lt         *string   `json:"lt" graphql:"lt"`
	Ge         *string   `json:"ge" graphql:"ge"`
	Gt         *string   `json:"gt" graphql:"gt"`
	Between    []*string `json:"between" graphql:"between"`
	BeginsWith *string   `json:"beginsWith" graphql:"beginsWith"`
}
